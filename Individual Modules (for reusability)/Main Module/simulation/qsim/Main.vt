// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/06/2014 15:47:59"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Main_vlg_sample_tst(
	Adress,
	clk,
	Miss_Ratio,
	reset,
	sampler_tx
);
input [4:0] Adress;
input  clk;
input [6:0] Miss_Ratio;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(Adress or clk or Miss_Ratio or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Main_vlg_check_tst (
	Actual_State,
	OUT_Block_Selector,
	OUT_Cache_Position,
	OUT_Cache_Value,
	sampler_rx
);
input [1:0] Actual_State;
input [3:0] OUT_Block_Selector;
input [3:0] OUT_Cache_Position;
input [31:0] OUT_Cache_Value;
input sampler_rx;

reg [1:0] Actual_State_expected;
reg [3:0] OUT_Block_Selector_expected;
reg [3:0] OUT_Cache_Position_expected;
reg [31:0] OUT_Cache_Value_expected;

reg [1:0] Actual_State_prev;
reg [3:0] OUT_Block_Selector_prev;
reg [3:0] OUT_Cache_Position_prev;
reg [31:0] OUT_Cache_Value_prev;

reg [1:0] Actual_State_expected_prev;
reg [3:0] OUT_Block_Selector_expected_prev;
reg [3:0] OUT_Cache_Position_expected_prev;
reg [31:0] OUT_Cache_Value_expected_prev;

reg [1:0] last_Actual_State_exp;
reg [3:0] last_OUT_Block_Selector_exp;
reg [3:0] last_OUT_Cache_Position_exp;
reg [31:0] last_OUT_Cache_Value_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	Actual_State_prev = Actual_State;
	OUT_Block_Selector_prev = OUT_Block_Selector;
	OUT_Cache_Position_prev = OUT_Cache_Position;
	OUT_Cache_Value_prev = OUT_Cache_Value;
end

// update expected /o prevs

always @(trigger)
begin
	Actual_State_expected_prev = Actual_State_expected;
	OUT_Block_Selector_expected_prev = OUT_Block_Selector_expected;
	OUT_Cache_Position_expected_prev = OUT_Cache_Position_expected;
	OUT_Cache_Value_expected_prev = OUT_Cache_Value_expected;
end


// expected Actual_State[ 1 ]
initial
begin
	Actual_State_expected[1] = 1'bX;
end 
// expected Actual_State[ 0 ]
initial
begin
	Actual_State_expected[0] = 1'bX;
end 
// expected OUT_Block_Selector[ 3 ]
initial
begin
	OUT_Block_Selector_expected[3] = 1'bX;
end 
// expected OUT_Block_Selector[ 2 ]
initial
begin
	OUT_Block_Selector_expected[2] = 1'bX;
end 
// expected OUT_Block_Selector[ 1 ]
initial
begin
	OUT_Block_Selector_expected[1] = 1'bX;
end 
// expected OUT_Block_Selector[ 0 ]
initial
begin
	OUT_Block_Selector_expected[0] = 1'bX;
end 
// expected OUT_Cache_Position[ 3 ]
initial
begin
	OUT_Cache_Position_expected[3] = 1'bX;
end 
// expected OUT_Cache_Position[ 2 ]
initial
begin
	OUT_Cache_Position_expected[2] = 1'bX;
end 
// expected OUT_Cache_Position[ 1 ]
initial
begin
	OUT_Cache_Position_expected[1] = 1'bX;
end 
// expected OUT_Cache_Position[ 0 ]
initial
begin
	OUT_Cache_Position_expected[0] = 1'bX;
end 
// expected OUT_Cache_Value[ 31 ]
initial
begin
	OUT_Cache_Value_expected[31] = 1'bX;
end 
// expected OUT_Cache_Value[ 30 ]
initial
begin
	OUT_Cache_Value_expected[30] = 1'bX;
end 
// expected OUT_Cache_Value[ 29 ]
initial
begin
	OUT_Cache_Value_expected[29] = 1'bX;
end 
// expected OUT_Cache_Value[ 28 ]
initial
begin
	OUT_Cache_Value_expected[28] = 1'bX;
end 
// expected OUT_Cache_Value[ 27 ]
initial
begin
	OUT_Cache_Value_expected[27] = 1'bX;
end 
// expected OUT_Cache_Value[ 26 ]
initial
begin
	OUT_Cache_Value_expected[26] = 1'bX;
end 
// expected OUT_Cache_Value[ 25 ]
initial
begin
	OUT_Cache_Value_expected[25] = 1'bX;
end 
// expected OUT_Cache_Value[ 24 ]
initial
begin
	OUT_Cache_Value_expected[24] = 1'bX;
end 
// expected OUT_Cache_Value[ 23 ]
initial
begin
	OUT_Cache_Value_expected[23] = 1'bX;
end 
// expected OUT_Cache_Value[ 22 ]
initial
begin
	OUT_Cache_Value_expected[22] = 1'bX;
end 
// expected OUT_Cache_Value[ 21 ]
initial
begin
	OUT_Cache_Value_expected[21] = 1'bX;
end 
// expected OUT_Cache_Value[ 20 ]
initial
begin
	OUT_Cache_Value_expected[20] = 1'bX;
end 
// expected OUT_Cache_Value[ 19 ]
initial
begin
	OUT_Cache_Value_expected[19] = 1'bX;
end 
// expected OUT_Cache_Value[ 18 ]
initial
begin
	OUT_Cache_Value_expected[18] = 1'bX;
end 
// expected OUT_Cache_Value[ 17 ]
initial
begin
	OUT_Cache_Value_expected[17] = 1'bX;
end 
// expected OUT_Cache_Value[ 16 ]
initial
begin
	OUT_Cache_Value_expected[16] = 1'bX;
end 
// expected OUT_Cache_Value[ 15 ]
initial
begin
	OUT_Cache_Value_expected[15] = 1'bX;
end 
// expected OUT_Cache_Value[ 14 ]
initial
begin
	OUT_Cache_Value_expected[14] = 1'bX;
end 
// expected OUT_Cache_Value[ 13 ]
initial
begin
	OUT_Cache_Value_expected[13] = 1'bX;
end 
// expected OUT_Cache_Value[ 12 ]
initial
begin
	OUT_Cache_Value_expected[12] = 1'bX;
end 
// expected OUT_Cache_Value[ 11 ]
initial
begin
	OUT_Cache_Value_expected[11] = 1'bX;
end 
// expected OUT_Cache_Value[ 10 ]
initial
begin
	OUT_Cache_Value_expected[10] = 1'bX;
end 
// expected OUT_Cache_Value[ 9 ]
initial
begin
	OUT_Cache_Value_expected[9] = 1'bX;
end 
// expected OUT_Cache_Value[ 8 ]
initial
begin
	OUT_Cache_Value_expected[8] = 1'bX;
end 
// expected OUT_Cache_Value[ 7 ]
initial
begin
	OUT_Cache_Value_expected[7] = 1'bX;
end 
// expected OUT_Cache_Value[ 6 ]
initial
begin
	OUT_Cache_Value_expected[6] = 1'bX;
end 
// expected OUT_Cache_Value[ 5 ]
initial
begin
	OUT_Cache_Value_expected[5] = 1'bX;
end 
// expected OUT_Cache_Value[ 4 ]
initial
begin
	OUT_Cache_Value_expected[4] = 1'bX;
end 
// expected OUT_Cache_Value[ 3 ]
initial
begin
	OUT_Cache_Value_expected[3] = 1'bX;
end 
// expected OUT_Cache_Value[ 2 ]
initial
begin
	OUT_Cache_Value_expected[2] = 1'bX;
end 
// expected OUT_Cache_Value[ 1 ]
initial
begin
	OUT_Cache_Value_expected[1] = 1'bX;
end 
// expected OUT_Cache_Value[ 0 ]
initial
begin
	OUT_Cache_Value_expected[0] = 1'bX;
end 
// generate trigger
always @(Actual_State_expected or Actual_State or OUT_Block_Selector_expected or OUT_Block_Selector or OUT_Cache_Position_expected or OUT_Cache_Position or OUT_Cache_Value_expected or OUT_Cache_Value)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Actual_State = %b | expected OUT_Block_Selector = %b | expected OUT_Cache_Position = %b | expected OUT_Cache_Value = %b | ",Actual_State_expected_prev,OUT_Block_Selector_expected_prev,OUT_Cache_Position_expected_prev,OUT_Cache_Value_expected_prev);
	$display("| real Actual_State = %b | real OUT_Block_Selector = %b | real OUT_Cache_Position = %b | real OUT_Cache_Value = %b | ",Actual_State_prev,OUT_Block_Selector_prev,OUT_Cache_Position_prev,OUT_Cache_Value_prev);
`endif
	if (
		( Actual_State_expected_prev[0] !== 1'bx ) && ( Actual_State_prev[0] !== Actual_State_expected_prev[0] )
		&& ((Actual_State_expected_prev[0] !== last_Actual_State_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Actual_State[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Actual_State_expected_prev);
		$display ("     Real value = %b", Actual_State_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Actual_State_exp[0] = Actual_State_expected_prev[0];
	end
	if (
		( Actual_State_expected_prev[1] !== 1'bx ) && ( Actual_State_prev[1] !== Actual_State_expected_prev[1] )
		&& ((Actual_State_expected_prev[1] !== last_Actual_State_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Actual_State[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Actual_State_expected_prev);
		$display ("     Real value = %b", Actual_State_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Actual_State_exp[1] = Actual_State_expected_prev[1];
	end
	if (
		( OUT_Block_Selector_expected_prev[0] !== 1'bx ) && ( OUT_Block_Selector_prev[0] !== OUT_Block_Selector_expected_prev[0] )
		&& ((OUT_Block_Selector_expected_prev[0] !== last_OUT_Block_Selector_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Block_Selector[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Block_Selector_expected_prev);
		$display ("     Real value = %b", OUT_Block_Selector_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_Block_Selector_exp[0] = OUT_Block_Selector_expected_prev[0];
	end
	if (
		( OUT_Block_Selector_expected_prev[1] !== 1'bx ) && ( OUT_Block_Selector_prev[1] !== OUT_Block_Selector_expected_prev[1] )
		&& ((OUT_Block_Selector_expected_prev[1] !== last_OUT_Block_Selector_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Block_Selector[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Block_Selector_expected_prev);
		$display ("     Real value = %b", OUT_Block_Selector_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_Block_Selector_exp[1] = OUT_Block_Selector_expected_prev[1];
	end
	if (
		( OUT_Block_Selector_expected_prev[2] !== 1'bx ) && ( OUT_Block_Selector_prev[2] !== OUT_Block_Selector_expected_prev[2] )
		&& ((OUT_Block_Selector_expected_prev[2] !== last_OUT_Block_Selector_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Block_Selector[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Block_Selector_expected_prev);
		$display ("     Real value = %b", OUT_Block_Selector_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_Block_Selector_exp[2] = OUT_Block_Selector_expected_prev[2];
	end
	if (
		( OUT_Block_Selector_expected_prev[3] !== 1'bx ) && ( OUT_Block_Selector_prev[3] !== OUT_Block_Selector_expected_prev[3] )
		&& ((OUT_Block_Selector_expected_prev[3] !== last_OUT_Block_Selector_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Block_Selector[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Block_Selector_expected_prev);
		$display ("     Real value = %b", OUT_Block_Selector_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_Block_Selector_exp[3] = OUT_Block_Selector_expected_prev[3];
	end
	if (
		( OUT_Cache_Position_expected_prev[0] !== 1'bx ) && ( OUT_Cache_Position_prev[0] !== OUT_Cache_Position_expected_prev[0] )
		&& ((OUT_Cache_Position_expected_prev[0] !== last_OUT_Cache_Position_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Position[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Position_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Position_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_Cache_Position_exp[0] = OUT_Cache_Position_expected_prev[0];
	end
	if (
		( OUT_Cache_Position_expected_prev[1] !== 1'bx ) && ( OUT_Cache_Position_prev[1] !== OUT_Cache_Position_expected_prev[1] )
		&& ((OUT_Cache_Position_expected_prev[1] !== last_OUT_Cache_Position_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Position[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Position_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Position_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_Cache_Position_exp[1] = OUT_Cache_Position_expected_prev[1];
	end
	if (
		( OUT_Cache_Position_expected_prev[2] !== 1'bx ) && ( OUT_Cache_Position_prev[2] !== OUT_Cache_Position_expected_prev[2] )
		&& ((OUT_Cache_Position_expected_prev[2] !== last_OUT_Cache_Position_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Position[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Position_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Position_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_Cache_Position_exp[2] = OUT_Cache_Position_expected_prev[2];
	end
	if (
		( OUT_Cache_Position_expected_prev[3] !== 1'bx ) && ( OUT_Cache_Position_prev[3] !== OUT_Cache_Position_expected_prev[3] )
		&& ((OUT_Cache_Position_expected_prev[3] !== last_OUT_Cache_Position_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Position[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Position_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Position_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_Cache_Position_exp[3] = OUT_Cache_Position_expected_prev[3];
	end
	if (
		( OUT_Cache_Value_expected_prev[0] !== 1'bx ) && ( OUT_Cache_Value_prev[0] !== OUT_Cache_Value_expected_prev[0] )
		&& ((OUT_Cache_Value_expected_prev[0] !== last_OUT_Cache_Value_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[0] = OUT_Cache_Value_expected_prev[0];
	end
	if (
		( OUT_Cache_Value_expected_prev[1] !== 1'bx ) && ( OUT_Cache_Value_prev[1] !== OUT_Cache_Value_expected_prev[1] )
		&& ((OUT_Cache_Value_expected_prev[1] !== last_OUT_Cache_Value_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[1] = OUT_Cache_Value_expected_prev[1];
	end
	if (
		( OUT_Cache_Value_expected_prev[2] !== 1'bx ) && ( OUT_Cache_Value_prev[2] !== OUT_Cache_Value_expected_prev[2] )
		&& ((OUT_Cache_Value_expected_prev[2] !== last_OUT_Cache_Value_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[2] = OUT_Cache_Value_expected_prev[2];
	end
	if (
		( OUT_Cache_Value_expected_prev[3] !== 1'bx ) && ( OUT_Cache_Value_prev[3] !== OUT_Cache_Value_expected_prev[3] )
		&& ((OUT_Cache_Value_expected_prev[3] !== last_OUT_Cache_Value_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[3] = OUT_Cache_Value_expected_prev[3];
	end
	if (
		( OUT_Cache_Value_expected_prev[4] !== 1'bx ) && ( OUT_Cache_Value_prev[4] !== OUT_Cache_Value_expected_prev[4] )
		&& ((OUT_Cache_Value_expected_prev[4] !== last_OUT_Cache_Value_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[4] = OUT_Cache_Value_expected_prev[4];
	end
	if (
		( OUT_Cache_Value_expected_prev[5] !== 1'bx ) && ( OUT_Cache_Value_prev[5] !== OUT_Cache_Value_expected_prev[5] )
		&& ((OUT_Cache_Value_expected_prev[5] !== last_OUT_Cache_Value_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[5] = OUT_Cache_Value_expected_prev[5];
	end
	if (
		( OUT_Cache_Value_expected_prev[6] !== 1'bx ) && ( OUT_Cache_Value_prev[6] !== OUT_Cache_Value_expected_prev[6] )
		&& ((OUT_Cache_Value_expected_prev[6] !== last_OUT_Cache_Value_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[6] = OUT_Cache_Value_expected_prev[6];
	end
	if (
		( OUT_Cache_Value_expected_prev[7] !== 1'bx ) && ( OUT_Cache_Value_prev[7] !== OUT_Cache_Value_expected_prev[7] )
		&& ((OUT_Cache_Value_expected_prev[7] !== last_OUT_Cache_Value_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[7] = OUT_Cache_Value_expected_prev[7];
	end
	if (
		( OUT_Cache_Value_expected_prev[8] !== 1'bx ) && ( OUT_Cache_Value_prev[8] !== OUT_Cache_Value_expected_prev[8] )
		&& ((OUT_Cache_Value_expected_prev[8] !== last_OUT_Cache_Value_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[8] = OUT_Cache_Value_expected_prev[8];
	end
	if (
		( OUT_Cache_Value_expected_prev[9] !== 1'bx ) && ( OUT_Cache_Value_prev[9] !== OUT_Cache_Value_expected_prev[9] )
		&& ((OUT_Cache_Value_expected_prev[9] !== last_OUT_Cache_Value_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[9] = OUT_Cache_Value_expected_prev[9];
	end
	if (
		( OUT_Cache_Value_expected_prev[10] !== 1'bx ) && ( OUT_Cache_Value_prev[10] !== OUT_Cache_Value_expected_prev[10] )
		&& ((OUT_Cache_Value_expected_prev[10] !== last_OUT_Cache_Value_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[10] = OUT_Cache_Value_expected_prev[10];
	end
	if (
		( OUT_Cache_Value_expected_prev[11] !== 1'bx ) && ( OUT_Cache_Value_prev[11] !== OUT_Cache_Value_expected_prev[11] )
		&& ((OUT_Cache_Value_expected_prev[11] !== last_OUT_Cache_Value_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[11] = OUT_Cache_Value_expected_prev[11];
	end
	if (
		( OUT_Cache_Value_expected_prev[12] !== 1'bx ) && ( OUT_Cache_Value_prev[12] !== OUT_Cache_Value_expected_prev[12] )
		&& ((OUT_Cache_Value_expected_prev[12] !== last_OUT_Cache_Value_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[12] = OUT_Cache_Value_expected_prev[12];
	end
	if (
		( OUT_Cache_Value_expected_prev[13] !== 1'bx ) && ( OUT_Cache_Value_prev[13] !== OUT_Cache_Value_expected_prev[13] )
		&& ((OUT_Cache_Value_expected_prev[13] !== last_OUT_Cache_Value_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[13] = OUT_Cache_Value_expected_prev[13];
	end
	if (
		( OUT_Cache_Value_expected_prev[14] !== 1'bx ) && ( OUT_Cache_Value_prev[14] !== OUT_Cache_Value_expected_prev[14] )
		&& ((OUT_Cache_Value_expected_prev[14] !== last_OUT_Cache_Value_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[14] = OUT_Cache_Value_expected_prev[14];
	end
	if (
		( OUT_Cache_Value_expected_prev[15] !== 1'bx ) && ( OUT_Cache_Value_prev[15] !== OUT_Cache_Value_expected_prev[15] )
		&& ((OUT_Cache_Value_expected_prev[15] !== last_OUT_Cache_Value_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[15] = OUT_Cache_Value_expected_prev[15];
	end
	if (
		( OUT_Cache_Value_expected_prev[16] !== 1'bx ) && ( OUT_Cache_Value_prev[16] !== OUT_Cache_Value_expected_prev[16] )
		&& ((OUT_Cache_Value_expected_prev[16] !== last_OUT_Cache_Value_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[16] = OUT_Cache_Value_expected_prev[16];
	end
	if (
		( OUT_Cache_Value_expected_prev[17] !== 1'bx ) && ( OUT_Cache_Value_prev[17] !== OUT_Cache_Value_expected_prev[17] )
		&& ((OUT_Cache_Value_expected_prev[17] !== last_OUT_Cache_Value_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[17] = OUT_Cache_Value_expected_prev[17];
	end
	if (
		( OUT_Cache_Value_expected_prev[18] !== 1'bx ) && ( OUT_Cache_Value_prev[18] !== OUT_Cache_Value_expected_prev[18] )
		&& ((OUT_Cache_Value_expected_prev[18] !== last_OUT_Cache_Value_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[18] = OUT_Cache_Value_expected_prev[18];
	end
	if (
		( OUT_Cache_Value_expected_prev[19] !== 1'bx ) && ( OUT_Cache_Value_prev[19] !== OUT_Cache_Value_expected_prev[19] )
		&& ((OUT_Cache_Value_expected_prev[19] !== last_OUT_Cache_Value_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[19] = OUT_Cache_Value_expected_prev[19];
	end
	if (
		( OUT_Cache_Value_expected_prev[20] !== 1'bx ) && ( OUT_Cache_Value_prev[20] !== OUT_Cache_Value_expected_prev[20] )
		&& ((OUT_Cache_Value_expected_prev[20] !== last_OUT_Cache_Value_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[20] = OUT_Cache_Value_expected_prev[20];
	end
	if (
		( OUT_Cache_Value_expected_prev[21] !== 1'bx ) && ( OUT_Cache_Value_prev[21] !== OUT_Cache_Value_expected_prev[21] )
		&& ((OUT_Cache_Value_expected_prev[21] !== last_OUT_Cache_Value_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[21] = OUT_Cache_Value_expected_prev[21];
	end
	if (
		( OUT_Cache_Value_expected_prev[22] !== 1'bx ) && ( OUT_Cache_Value_prev[22] !== OUT_Cache_Value_expected_prev[22] )
		&& ((OUT_Cache_Value_expected_prev[22] !== last_OUT_Cache_Value_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[22] = OUT_Cache_Value_expected_prev[22];
	end
	if (
		( OUT_Cache_Value_expected_prev[23] !== 1'bx ) && ( OUT_Cache_Value_prev[23] !== OUT_Cache_Value_expected_prev[23] )
		&& ((OUT_Cache_Value_expected_prev[23] !== last_OUT_Cache_Value_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[23] = OUT_Cache_Value_expected_prev[23];
	end
	if (
		( OUT_Cache_Value_expected_prev[24] !== 1'bx ) && ( OUT_Cache_Value_prev[24] !== OUT_Cache_Value_expected_prev[24] )
		&& ((OUT_Cache_Value_expected_prev[24] !== last_OUT_Cache_Value_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[24] = OUT_Cache_Value_expected_prev[24];
	end
	if (
		( OUT_Cache_Value_expected_prev[25] !== 1'bx ) && ( OUT_Cache_Value_prev[25] !== OUT_Cache_Value_expected_prev[25] )
		&& ((OUT_Cache_Value_expected_prev[25] !== last_OUT_Cache_Value_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[25] = OUT_Cache_Value_expected_prev[25];
	end
	if (
		( OUT_Cache_Value_expected_prev[26] !== 1'bx ) && ( OUT_Cache_Value_prev[26] !== OUT_Cache_Value_expected_prev[26] )
		&& ((OUT_Cache_Value_expected_prev[26] !== last_OUT_Cache_Value_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[26] = OUT_Cache_Value_expected_prev[26];
	end
	if (
		( OUT_Cache_Value_expected_prev[27] !== 1'bx ) && ( OUT_Cache_Value_prev[27] !== OUT_Cache_Value_expected_prev[27] )
		&& ((OUT_Cache_Value_expected_prev[27] !== last_OUT_Cache_Value_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[27] = OUT_Cache_Value_expected_prev[27];
	end
	if (
		( OUT_Cache_Value_expected_prev[28] !== 1'bx ) && ( OUT_Cache_Value_prev[28] !== OUT_Cache_Value_expected_prev[28] )
		&& ((OUT_Cache_Value_expected_prev[28] !== last_OUT_Cache_Value_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[28] = OUT_Cache_Value_expected_prev[28];
	end
	if (
		( OUT_Cache_Value_expected_prev[29] !== 1'bx ) && ( OUT_Cache_Value_prev[29] !== OUT_Cache_Value_expected_prev[29] )
		&& ((OUT_Cache_Value_expected_prev[29] !== last_OUT_Cache_Value_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[29] = OUT_Cache_Value_expected_prev[29];
	end
	if (
		( OUT_Cache_Value_expected_prev[30] !== 1'bx ) && ( OUT_Cache_Value_prev[30] !== OUT_Cache_Value_expected_prev[30] )
		&& ((OUT_Cache_Value_expected_prev[30] !== last_OUT_Cache_Value_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[30] = OUT_Cache_Value_expected_prev[30];
	end
	if (
		( OUT_Cache_Value_expected_prev[31] !== 1'bx ) && ( OUT_Cache_Value_prev[31] !== OUT_Cache_Value_expected_prev[31] )
		&& ((OUT_Cache_Value_expected_prev[31] !== last_OUT_Cache_Value_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Cache_Value[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Cache_Value_expected_prev);
		$display ("     Real value = %b", OUT_Cache_Value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_Cache_Value_exp[31] = OUT_Cache_Value_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] Adress;
reg clk;
reg [6:0] Miss_Ratio;
reg reset;
// wires                                               
wire [1:0] Actual_State;
wire [3:0] OUT_Block_Selector;
wire [3:0] OUT_Cache_Position;
wire [31:0] OUT_Cache_Value;

wire sampler;                             

// assign statements (if any)                          
Main i1 (
// port map - connection between master ports and signals/registers   
	.Actual_State(Actual_State),
	.Adress(Adress),
	.clk(clk),
	.Miss_Ratio(Miss_Ratio),
	.OUT_Block_Selector(OUT_Block_Selector),
	.OUT_Cache_Position(OUT_Cache_Position),
	.OUT_Cache_Value(OUT_Cache_Value),
	.reset(reset)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// Miss_Ratio[ 6 ]
initial
begin
	Miss_Ratio[6] = 1'b1;
	Miss_Ratio[6] = #10000 1'b0;
end 
// Miss_Ratio[ 5 ]
initial
begin
	Miss_Ratio[5] = 1'b1;
	Miss_Ratio[5] = #10000 1'b0;
end 
// Miss_Ratio[ 4 ]
initial
begin
	Miss_Ratio[4] = 1'b1;
	Miss_Ratio[4] = #10000 1'b0;
end 
// Miss_Ratio[ 3 ]
initial
begin
	Miss_Ratio[3] = 1'b1;
	Miss_Ratio[3] = #10000 1'b0;
end 
// Miss_Ratio[ 2 ]
initial
begin
	Miss_Ratio[2] = 1'b1;
	Miss_Ratio[2] = #10000 1'b0;
end 
// Miss_Ratio[ 1 ]
initial
begin
	Miss_Ratio[1] = 1'b1;
	Miss_Ratio[1] = #10000 1'b0;
end 
// Miss_Ratio[ 0 ]
initial
begin
	Miss_Ratio[0] = 1'b1;
	Miss_Ratio[0] = #10000 1'b0;
end 
// Adress[ 4 ]
initial
begin
	Adress[4] = 1'b0;
	Adress[4] = #750000 1'b1;
end 
// Adress[ 3 ]
initial
begin
	Adress[3] = 1'b0;
	Adress[3] = #350000 1'b1;
	Adress[3] = #400000 1'b0;
end 
// Adress[ 2 ]
initial
begin
	Adress[2] = 1'b0;
	# 150000;
	repeat(2)
	begin
		Adress[2] = 1'b1;
		Adress[2] = #200000 1'b0;
		# 200000;
	end
	Adress[2] = 1'b1;
end 
// Adress[ 1 ]
initial
begin
	Adress[1] = 1'b0;
	# 50000;
	repeat(4)
	begin
		Adress[1] = 1'b1;
		Adress[1] = #100000 1'b0;
		# 100000;
	end
	Adress[1] = 1'b1;
	Adress[1] = #100000 1'b0;
end 
// Adress[ 0 ]
always
begin
	Adress[0] = 1'b1;
	Adress[0] = #50000 1'b0;
	#50000;
end 

Main_vlg_sample_tst tb_sample (
	.Adress(Adress),
	.clk(clk),
	.Miss_Ratio(Miss_Ratio),
	.reset(reset),
	.sampler_tx(sampler)
);

Main_vlg_check_tst tb_out(
	.Actual_State(Actual_State),
	.OUT_Block_Selector(OUT_Block_Selector),
	.OUT_Cache_Position(OUT_Cache_Position),
	.OUT_Cache_Value(OUT_Cache_Value),
	.sampler_rx(sampler)
);
endmodule

